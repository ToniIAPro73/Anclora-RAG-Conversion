# =============================================================================
# Anclora RAG - Configuración con Pgvector
# =============================================================================
# Configuración avanzada con PostgreSQL + pgvector para almacenamiento vectorial
# Incluye optimizaciones de rendimiento y configuración de seguridad
# =============================================================================

version: '3.8'

# Environment variables loaded from .env file
x-environment: &default-environment
  MODEL: llama3
  EMBEDDINGS_MODEL_NAME: sentence-transformers/all-mpnet-base-v2
  TARGET_SOURCE_CHUNKS: 5
  # Docker network configuration
  PG_HOST: postgres
  PG_PORT: 5432
  PG_DB: anclora_rag
  PG_USER: anclora_user
  PG_PASSWORD: ${PG_PASSWORD:-anclora_secure_password_2024}
  OLLAMA_HOST: ollama
  OLLAMA_PORT: 11434
  # Telemetry disabled
  ANONYMIZED_TELEMETRY: false

# Resource limits for services
x-resource-limits: &resource-limits
  deploy:
    resources:
      limits:
        cpus: '2.0'
        memory: 4G
      reservations:
        cpus: '0.5'
        memory: 512M

# Restart policy for critical services
x-restart-policy: &restart-policy
  restart: unless-stopped

services:
  # Language Model Service - Ollama
  ollama:
    <<: *restart-policy
    image: ollama/ollama:latest
    ports:
      - "11434:11434"
    volumes:
      - ollama_models:/root/.ollama
    networks:
      - anclora-network
    environment:
      <<: *default-environment
    deploy:
      resources:
        limits:
          cpus: '4.0'
          memory: 8G
        reservations:
          cpus: '1.0'
          memory: 2G
    healthcheck:
      test: ["CMD", "ollama", "list"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Vector Database - PostgreSQL with pgvector
  postgres:
    <<: *restart-policy
    image: pgvector/pgvector:pg16
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-pgvector.sql:/docker-entrypoint-initdb.d/01-init-pgvector.sql:ro
    ports:
      - "5432:5432"
    networks:
      - anclora-network
    environment:
      <<: *default-environment
      POSTGRES_DB: ${PG_DB}
      POSTGRES_USER: ${PG_USER}
      POSTGRES_PASSWORD: ${PG_PASSWORD}
      # Configuración de rendimiento PostgreSQL
      POSTGRES_SHARED_BUFFERS: 256MB
      POSTGRES_EFFECTIVE_CACHE_SIZE: 1GB
      POSTGRES_WORK_MEM: 64MB
      POSTGRES_MAINTENANCE_WORK_MEM: 128MB
      POSTGRES_CHECKPOINT_COMPLETION_TARGET: 0.9
      POSTGRES_WAL_BUFFERS: 16MB
      POSTGRES_DEFAULT_STATISTICS_TARGET: 100
      POSTGRES_RANDOM_PAGE_COST: 1.1
      POSTGRES_EFFECTIVE_IO_CONCURRENCY: 200
    command:
      - "postgres"
      - "-c"
      - "shared_preload_libraries=pg_stat_statements"
      - "-c"
      - "log_statement=all"
      - "-c"
      - "log_min_duration_statement=1000"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${PG_USER} -d ${PG_DB}"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # User Interface - Streamlit Application
  ui:
    <<: [*restart-policy, *resource-limits]
    build:
      context: ./app
      dockerfile: Dockerfile
      target: ui-service
    ports:
      - "8501:8501"
    volumes:
      - ./app:/app
    networks:
      - anclora-network
    depends_on:
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *default-environment
      # Configuración de base de datos
      DB_TYPE: postgres
      # Configuración de seguridad mejorada
      ANCLORA_JWT_SECRET: ${ANCLORA_JWT_SECRET:-your-super-secret-jwt-key-change-this}
      ANCLORA_JWT_ALGORITHMS: ${ANCLORA_JWT_ALGORITHMS:-HS256}
      # Configuración de métricas
      PROMETHEUS_METRICS_PORT: 9000
      PROMETHEUS_METRICS_HOST: 0.0.0.0
      # Disable Streamlit telemetry
      STREAMLIT_BROWSER_GATHER_USAGE_STATS: false
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8501/_stcore/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # REST API Service - FastAPI Application
  api:
    <<: [*restart-policy, *resource-limits]
    build:
      context: ./app
      dockerfile: Dockerfile
      target: api-service
    ports:
      - "8081:8081"
    volumes:
      - ./app:/app
    networks:
      - anclora-network
    depends_on:
      ollama:
        condition: service_healthy
      postgres:
        condition: service_healthy
    environment:
      <<: *default-environment
      DB_TYPE: postgres
      PYTHONPATH: /app
      # Configuración de seguridad mejorada
      ANCLORA_API_TOKENS: ${ANCLORA_API_TOKENS:-}
      ANCLORA_API_TOKEN: ${ANCLORA_API_TOKEN:-}
      ANCLORA_JWT_SECRET: ${ANCLORA_JWT_SECRET:-your-super-secret-jwt-key-change-this}
      ANCLORA_JWT_ALGORITHMS: ${ANCLORA_JWT_ALGORITHMS:-HS256}
      ANCLORA_JWT_AUDIENCE: ${ANCLORA_JWT_AUDIENCE:-}
      ANCLORA_JWT_ISSUER: ${ANCLORA_JWT_ISSUER:-}
      # Configuración de métricas
      PROMETHEUS_METRICS_PORT: 9001
      PROMETHEUS_METRICS_HOST: 0.0.0.0
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8081/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # =============================================================================
  # Servicio de Migración (Temporal)
  # =============================================================================
  migration:
    build:
      context: ./app
      dockerfile: Dockerfile
      target: api-service
    volumes:
      - ./app:/app
      - ./scripts:/scripts
    networks:
      - anclora-network
    environment:
      <<: *default-environment
      CHROMA_HOST: ${CHROMA_HOST:-chroma}
      CHROMA_PORT: ${CHROMA_PORT:-8000}
    command: ["python", "/scripts/migrate_to_pgvector.py"]
    depends_on:
      - postgres
      - chroma
    profiles: ["migration"]
    restart: "no"

# Volumes Configuration
volumes:
  # Ollama models storage
  ollama_models:
    driver: local

  # PostgreSQL data storage
  postgres_data:
    driver: local

# Networks Configuration
networks:
  anclora-network:
    driver: bridge